<rml>
<head>
	<title>game</title>
	<link rel="stylesheet" type="text/css" href="css/gamemenu.rcss" />
	<link type="text/template" href="template_ingame.rml" />
	<script>
		Element @gamemenu;
		Element @gamecommands;

		// racesow
		int lastPosSpeed;
		String previousSpeed;
		const int MAX_POS_SPEED = 1000000;

		/* Source: libsrcs/libRocket/libRocket/Include/Rocket/Core/Input.h */
		const int KI_NUMPAD0 = 51;
		const int KI_NUMPAD1 = 52;
		const int KI_NUMPAD2 = 53;
		const int KI_NUMPAD3 = 54;
		const int KI_NUMPAD4 = 55;
		const int KI_NUMPAD5 = 56;
		const int KI_NUMPAD6 = 57;
		const int KI_NUMPAD7 = 58;
		const int KI_NUMPAD8 = 59;
		const int KI_NUMPAD9 = 60;
		// !racesow

		void onGameLoad( Element @body, Event @evt )
		{
			onTemplateLoad( body, evt );

			@gamemenu = body.getElementById( 'menu-ingame' );
			@gamecommands = gamemenu.getElementById( 'menu-commands' );

			// racesow
			lastPosSpeed = 0;
			ElementFormControl @txt = body.getElementById( 'pos-speed' );
			txt.value = StringUtils::FormatInt( lastPosSpeed, "", 1 );
			previousSpeed = txt.value;
			// !racesow
		}

		void onCmdButtonClick( Element @self, Event @evt )
		{
			window.close();

			String command = self.getAttr( 'command', '' );
			if( !command.empty() ) {
				game.execAppend( command + '\n' );
			}
		}

		void showMenuButton( const String @id )
		{
			gamemenu.getElementById( id ).css( 'display', 'block' );
		}

		void onGameShow( Element @body, Event @evt )
		{
			bool isTeamBased = false;
			int team = 0;
			int challenger = 0;
			bool needsReady = false, isReady = false;
			String gametype = "";
			bool hasGametypeMenu = false;
			int firstTeam = 0, lastTeam = 0, specTeam = 0;

			// parse query string parameters
			const Dictionary @params = body.ownerDocument.URL.getParameters();

			int tempInt;
			String tempStr;

			if( @gamemenu == null || !params.get( 'gametype', gametype ) ) {
				if( @gamemenu != null ) {
					gamemenu.css( 'visibility', 'hidden' );
				}

				if( game.clientState >= CA_CONNECTED ) {
					game.exec( 'gamemenu\n' );
					return;
				}

				// assume an offline menu
				window.location = 'game_join.rml';
				return;
			}

			gamemenu.css( 'visibility', 'visible' );		

			if( params.get( 'is_teambased', tempStr ) ) {
				isTeamBased = (tempStr.toInt() != 0);
			}
			if( params.get( 'team', tempStr ) ) {
				team = tempStr.toInt();
			}
			if( params.get( 'queue', tempStr ) ) {
				challenger = tempStr.toInt();
			}
			if( params.get( 'needs_ready', tempStr ) ) {		
				needsReady = (tempStr.toInt() != 0);
			}
			if( params.get( 'is_ready', tempStr ) ) {
				isReady = (tempStr.toInt() != 0);
			}
			if( params.get( 'has_gametypemenu', tempStr ) ) {
				hasGametypeMenu = (tempStr.toInt() != 0);
			}

			if( isTeamBased && params.get( 'team_list', tempStr ) ) {
				uint whitespace = tempStr.locate( ' ', 0 );

				if( whitespace != tempStr.length() ) {
					firstTeam = tempStr.substr( 0, whitespace ).toInt();
					lastTeam = tempStr.substr( whitespace + 1 ).toInt();
				}
			}
			if( params.get( 'team_spec', tempStr ) ) {
				specTeam = tempStr.toInt();
			}

			// build RML code for our menu items
			String rml = '';

			// display game name
			gamemenu.getElementById( 'menu-header1' ).setAttr( 'value', game.cs( CS_HOSTNAME ) );

			// display map name
			String mapName = game.cs( CS_MAPNAME );
			String mapMessage = game.cs( CS_MESSAGE );

			rml = mapName;
			if( !mapMessage.empty() && mapMessage != mapName ) {
				rml += ' "' + mapMessage + '"';
			}

			gamemenu.getElementById( 'menu-header2' ).setAttr( 'value', rml );

			// various commands follow
			
			if( @gamecommands == null ) {
				return;
			}

			// hide all buttons by default
			for( uint i = 0; i < gamecommands.getNumChildren(); i++ ) {
				Element @button = @gamecommands.getChild( i );
				button.css( 'display', 'none' );
			}

			// ready button
			if( needsReady ) {
				showMenuButton( 'btn-ready' );
			}

			// not ready button
			if( isReady ) {
				showMenuButton( 'btn-not-ready' );
			}

			// 0 = gametype has no queue, 1 = is not in queue, 2 = is in queue
			if( challenger != 0 ) {
				if( challenger == 1 ) {
					showMenuButton( 'btn-join-queue' );
				}
				else {
					showMenuButton( 'btn-leave-queue' );
				}
			}
			else {
				// racesow
				Element @inputfield = gamemenu.getElementById( 'pos-speed' );
				Element @info = gamemenu.getElementById( 'info-join-game' );
				// !racesow
				if( team == specTeam ) {
					// racesow - hide input box when spectating
					info.css( 'display', '' );
					inputfield.css( 'display', 'none' );
					// !racesow

					if( isTeamBased ) {
						Element @join_btn_any = gamemenu.getElementById( 'btn-join' );
						String @join_btn_any_cmd = join_btn_any.getAttr( 'command', '' );

						join_btn_any.css( 'display', 'block' );

						// set cmd's and texts for team buttons
						for( int i = firstTeam; i <= lastTeam; i++ ) {
							Element @join_team_btn = gamemenu.getElementById( 'btn-join-team' + (i - firstTeam + 1) );
							if( @join_team_btn == null ) {
								// no button reserved
								return;
							}

							String @teamName = game.cs( CS_TEAM_ALPHA_NAME + i - firstTeam );
							join_team_btn.setInnerRML( StringUtils::Format( _T( 'Join %s' ), teamName ) );
							join_team_btn.setAttr( 'command', join_btn_any_cmd + ' "' + teamName + '"' );

							showMenuButton( join_team_btn.id );
						}
					}
					else {
						showMenuButton( 'btn-join' );
					}
				}
				else {
					// racesow - show buttons and focussed input box when ingame
					info.css( 'display', 'none' );
					inputfield.css( 'display', '' );
					inputfield.focus();
					// racesow
					showMenuButton( 'btn-spectate' );
				}
			}

			if( hasGametypeMenu ) {
				showMenuButton( 'btn-gametype-menu' );
				gamemenu.getElementById( 'btn-gametype-menu' ).setInnerRML( 
					StringUtils::Format( _T( '"%s" options' ), game.cs( CS_GAMETYPETITLE ) )
				);
			}

			if( team == specTeam ) {
				showMenuButton( 'link-chasecam' );
			}
			
			showMenuButton( 'link-callvotes' );

			showMenuButton( 'btn-disconnect' );

			showMenuButton( 'link-main' );			
			showMenuButton( 'btn-return' );

			animationsOnShow();
		}

		// racesow
		/**
		* Update the player's position speed (used in practicemode) through the
		* command 'position speed x' with x being the new speed
		*/
		void updatePosSpeed( )
		{
			ElementFormControl @txt = gamemenu.getElementById( 'pos-speed' );
			int curPosSpeed;

			if( @txt == null )
				return;

			// if the inputbox is empty, put a placeholder 0
			if ( txt.value == "" )
				txt.value = "0";
			curPosSpeed = txt.value.toInt(); // cast to int to strip non-numeric chars
			
			// take care of int overflow
			if ( curPosSpeed > MAX_POS_SPEED ) {
				txt.value = previousSpeed;
				return;
			}
			
			// remove the placeholder 0 if it's at the end
			if ( previousSpeed == "0" && txt.value.length() > 1 && txt.value.substr( 0, 1 ) != "0" )
			{
				txt.value = txt.value.substr( 0, txt.value.length() - 1 );
				curPosSpeed = txt.value.toInt();
			}
			
			if ( lastPosSpeed == curPosSpeed )
			{
				txt.value = StringUtils::FormatInt( txt.value, "", 1 );
				previousSpeed = txt.value;
				return;  // don't exec cmd when nothing changed
			}
			lastPosSpeed = curPosSpeed;
			game.exec( "cmd position speed " + curPosSpeed + '\n' );
			txt.value = StringUtils::FormatInt( lastPosSpeed, "", 1 );
			previousSpeed = txt.value;
		}

		/**
		 * Change the player's position speed by a given amount, then update it
		 */
		void changePosSpeed( int change )
		{
			if ( change == 0 )
				return;
			ElementFormControl @txt = gamemenu.getElementById( 'pos-speed' );
			int newPosSpeed = lastPosSpeed + change;
			if ( newPosSpeed < 0 )
				newPosSpeed = 0;
			txt.value = StringUtils::FormatInt( newPosSpeed, "", 1 );
			updatePosSpeed( );
		}
		
		/**
		* Filter out numpad keypresses to stop propagation of Home/End events
		*/
		void ProcessKeyPress( Event @evt, Element @elem )
		{
			String key = evt.getParameter("key_identifier", "DUNNO");
			if (key >= KI_NUMPAD0 && key <= KI_NUMPAD9)
				evt.stopPropagation();
		}
		// !racesow
		
	</script>
</head>
<body template="porkui_ingame" onload="$onGameLoad" onshow="$onGameShow">
	<div id="menu-ingame">
		<!-- racesow -->
		<div id="mgx-logo" >
			<img src="../../gfx/logo/mgx_logo.tga" />
		</div>
		<!-- !racesow -->
		<field id="menu-header1" formatter="colorcode" />
		<field id="menu-header2" formatter="colorcode" />

		<div id="menu-commands" >
			<button id="btn-ready" command="cmd ready" onclick="$onCmdButtonClick">Ready!</button>
			<button id="btn-not-ready" command="cmd notready" onclick="$onCmdButtonClick">Not ready!</button>

			<button id="btn-join-queue" command="cmd enterqueue" onclick="$onCmdButtonClick">Join challengers queue</button>
			<button id="btn-leave-queue" command="cmd leavequeue" onclick="$onCmdButtonClick">Leave challengers queue</button>

			<button id="btn-join" command="cmd join" onclick="$onCmdButtonClick">Join the game</button>

			<button id="btn-join-any" command="cmd join" onclick="$onCmdButtonClick">Join any team</button>
			<button id="btn-join-team1" command="cmd join" onclick="$onCmdButtonClick">Join</button>
			<button id="btn-join-team2" command="cmd join" onclick="$onCmdButtonClick">Join</button>
			<!-- possibly team buttons follow -->

			<button id="btn-spectate" command="cmd spec" onclick="$onCmdButtonClick">Spectate</button>
			<button id="btn-disconnect" command="disconnect" onclick="$onCmdButtonClick">Disconnect</button>

			<button id="btn-gametype-menu" onclick="game.exec( 'gametypemenu\n' );">Game menu</button>

			<a id="link-callvotes" href="callvotes.rml" class="styled-button">Call a vote</a>

			<a id="link-chasecam" href="chasecam.rml" class="styled-button">Chasecam</a>

			<br/>
			<a id="link-main" href="index.rml" class="styled-button">Main menu</a>
			<button id="btn-return" command="" onclick="$onCmdButtonClick">Return to game</button>
		</div>
		
		<!-- racesow -->
		<div id="menu-commands-rs" class="right" >
			<a id="rs-binds" "index.rml" href="options_input_race.rml"  class="styled-button">MGXRace binds and settings</a>
			<button id="rs-toplist-merged" command="cmd topall" onclick="$onCmdButtonClick">Show toplist (merged)</button>
			<button id="rs-protectednick" command="cmd protectednick" onclick="$onCmdButtonClick">Update your name in toplists</button>
			<br />
			Visit our website for map lists, toplists, forums etc:<a href="http://mgxrace.net" target="_browser">MGXRace.net</a>

   			<br />
   			<br />
   			Texture pack and tutorials available on:
   			<a href="http://race.shishigami.eu" target="_browser">race.shishigami.eu</a>
			
   			<br />
			<p id="bla" class="title">Practicemode speed</p>
			<!-- only the inputbox -->
			<input id="pos-speed" type="text" onkeydown="ProcessKeyPress(event, self);" onchange="updatePosSpeed();" value="0" min="0" max="1000000" size="4" readonly />
			<p id="info-join-game">Join the game to change this setting.</p>
			<!-- inputbox accompanied with -/+ buttons. Leaving for future reference -->
			<!--<div id="pos-speed-buttons">
				<button onclick="changePosSpeed(-5);">-5</button>
				<button onclick="changePosSpeed(-1);">-1</button>
				<input id="pos-speed" type="text" onkeydown="ProcessKeyPress(event, self);" onchange="updatePosSpeed();" value="0" min="0" max="1000000" size="4" readonly />
				<button onclick="changePosSpeed(1);">+1</button>
				<button onclick="changePosSpeed(5);">+5</button>
			</div>-->
   		</div>
		<!-- !racesow -->
	</div>
</body>
</rml>
