<rml>
<head>
	<title>game</title>
	<link type="text/template" href="template.rml" />
	<link type="text/css" rel="stylesheet" href="css/serverlist.rcss" />
	<script src="as/favorites.as" />
	<script>

	const String browserDataSourceName = 'serverbrowser_source';
	const String browserTableNameDefault = 'normal';
	String browserTableName = ''; // persistent for document's lifetime
	
	DataSource @browserDataSource;
	Element @navibar;
	Element @servergrid;
	Element @refreshbtn;
	Element @connectbtn;
	Element @favoritebtn;
	Element @serverblock;

	void onJoinLoad( Element @body, Event @ev )
	{
		// get the 'servers' query string parameter value
		const Dictionary @dict = body.ownerDocument.URL.getParameters();
		dict.get( 'servers', browserTableName );
	
		onTemplateLoad( body, ev );

		@navibar = body.getElementById( 'navibar' );
		@refreshbtn = body.getElementById( 'refresh-btn' );
		@connectbtn = body.getElementById( 'connect-btn' );
		@favoritebtn = body.getElementById( 'favorite-btn' );

		// set the source table for the datagrid

		@servergrid = body.getElementById( 'serverbrowser_datagrid' );
		@serverblock = body.getElementById( 'serverblock' );

		if( @servergrid == null ) {
			return;
		}

		if( browserTableName.empty() ) {
			return;
		}

		// keep the button title up to date
		window.setInterval( updateRefreshTitle, 1000 );

		// when loading the game menu for the first time, start the update
		String forceUpdate;
		dict.get( 'force_update', forceUpdate );
		if( forceUpdate.toInt() != 0 && !serverBrowser.isUpdating() ) {
			serverBrowser.fullUpdate();
		}

		@browserDataSource = getDataSource( browserDataSourceName );

		cast<ElementDataGrid>(servergrid).setDataSource( browserDataSourceName + "." + browserTableName );

		// hide the infoblock as we haven't picked a server yet
		serverblock.css( 'display', 'none' );
		connectbtn.css( 'visibility', 'hidden' );
		favoritebtn.css( 'visibility', 'hidden' );

		Favorites::init();
	}

	void onJoinShow( Element @body, Event @ev )
	{
		URL location = body.ownerDocument.URL;
		const Dictionary @dict = location.getParameters();
		Cvar lasttab( 'ui_serverbrowser_tab', '', ::CVAR_ARCHIVE );

		// default to NW servers
		if( browserTableName.empty() ) {
			// redirect to a RESTful location
			location.setParameter( 'servers', lasttab.string.empty() ? browserTableNameDefault : lasttab.string );
			location.setParameter( 'force_update', '1' );
			window.location = location;
			return;
		}

		lasttab.set( browserTableName );

		body.getElementById( 'serverbrowser_frame' ).css( 'height',
			(body.getElementById( 'leftside' ).clientHeight() 
			- body.getElementById( 'navibar' ).clientHeight()
			- body.getElementById( 'serverbrowser-container' ).css( 'padding-top' ).toInt()
			- body.getElementById( 'serverbrowser-container' ).css( 'padding-bottom' ).toInt()
			- 16 /* safeguard */
			) + 'px'
		);

		onTemplateShow( body, @ev );

		// toggle :active pseudoclass for the current tab
		if( @navibar != null ) {
			Element @activeLink = navibar.getElementById( 'link-' + browserTableName );
			if( @activeLink != null ) {
				activeLink.togglePseudo( 'active', true );
			}
		}

		updateRefreshTitle();

		String noAnim;
		dict.get( 'noanim', noAnim );
		animationsOnShow( noAnim.toInt() != 0 );
	}

	void onRefreshButtonClick( Element @self, Event @ev )
	{
		if( serverBrowser.isUpdating() ) {
			serverBrowser.stopUpdate();	
		} else {
			serverBrowser.fullUpdate();
		}
		updateRefreshTitle();
	}
	
	bool updateRefreshTitle()
	{
		if ( @refreshbtn == null ) {
			return false;
		}

		String curInnerRML = refreshbtn.getInnerRML();
		String newInnerRML = serverBrowser.isUpdating() ? 'Stop' : 'Refresh';
		
		if( newInnerRML != curInnerRML ) {
			refreshbtn.setInnerRML( newInnerRML );
		}
		return true;
	}

	void onServerBrowserRowAdd( Element @self, Event @ev )
	{
		ElementDataGrid @grid = @self; // implicit cast to ElementDataGrid
		if( @grid == null ) {
			// not a datagrid
			return;
		}

		int numRowsAdded = ev.getParameter( 'num_rows_added', '0' ).toInt();
		if( numRowsAdded == 0 ) {
			return;
		}

		int firstRowAdded = ev.getParameter( 'first_row_added', '0' ).toInt();
		
		for( int i = 0; i < numRowsAdded; i++ ) {
			int rowIndex = firstRowAdded + i;
			Element @row = grid.getRow( rowIndex );

			// So save up on columns we'll just embed an icon reflecting
			// different states:
			// 1. passworded server
			// 2. favorite?

			bool isPassworded = browserDataSource.getField( browserTableName, rowIndex, 'password' ) == 'yes';
			bool isFavorite = browserDataSource.getField( browserTableName, rowIndex, 'favorite' ) == 'yes';

			if( isPassworded ) {
				row.addClass( 'passworded' );
			} else {
				row.removeClass( 'passworded' );
			}

			if( isFavorite ) {
				row.addClass( 'favorite' );
			} else {
				row.removeClass( 'favorite' );
			}
		}
	}

	void onServerBrowserRowSelect( Element @elem, Event @ev )
	{
		if( @serverblock == null ) {
			return;
		}
		if( @browserDataSource == null ) {
			return;
		}

		// get selected row and column indices
		String prop;
		int selectedRow = -1, selectedCol = -1;

		prop = ev.getParameter( 'index', '' );
		if( !prop.empty() ) {
			selectedRow = prop.toInt();
		}

		prop = ev.getParameter( 'column_index', '' );
		if( !prop.empty() ) {
			selectedCol = prop.toInt();
		}

		if( selectedRow < 0 ) {
			// header click
			if( selectedCol > 0 ) {
				serverBrowser.sortByColumn( cast<ElementDataGrid>(servergrid).getColumn( selectedCol ) );
			}
			return;
		}

		if( selectedCol == 0 ) {
			// clicked on star icon
			bool removed = ! toggleFavoriteOnSelectedServer();
			if( removed && browserTableName == 'favorites' ) {
				// the server has just been removed from favorites
				// stop right here
				return;
			}
		}

		connectbtn.css( 'visibility', 'visible' );
		favoritebtn.css( 'visibility', 'visible' );

		bool isFavorite = browserDataSource.getField( browserTableName, selectedRow, 'favorite' ) == 'yes';
		if( isFavorite )
			favoritebtn.setInnerRML( 'Remove from favorites' );
		else
			favoritebtn.setInnerRML( 'Add to favorites' );

		bool isTV = ( browserTableName == 'tv' );
		if( isTV ) {
			return;
		}
		
		String infoRml = '';

		// mapname
		infoRml += StringUtils::Format( _T( 'Map: %s' ), browserDataSource.getField( browserTableName, selectedRow, 'map' ) ) + '<br/>';

		// players
		infoRml += StringUtils::Format( _T( 'Players: %s' ), browserDataSource.getField( browserTableName, selectedRow, 'players' ) ) + '<br/>';

		// gametype
		infoRml += StringUtils::Format( _T( 'Gametype: %s' ), browserDataSource.getField( browserTableName, selectedRow, 'gametype' ) ) + '<br/>';

		// mod directory
		const String @mod = browserDataSource.getField( browserTableName, selectedRow, 'mod' );
		if ( !mod.empty() && mod != '&nbsp;' ) {
			infoRml += StringUtils::Format( _T( 'Mod: %s' ),  mod ) + '<br/>';
		}

		// ping
		infoRml += StringUtils::Format( _T( 'Ping: %s' ),  browserDataSource.getField( browserTableName, selectedRow, 'ping' ) ) + '<br/>';

		// address
		infoRml += StringUtils::Format( _T( 'Address: %s' ), browserDataSource.getField( browserTableName, selectedRow, 'address' ) ) + '<br/>';

		// hostname
		serverblock.getElementById( 'hostname' ).setAttr( 'value', browserDataSource.getField( browserTableName, selectedRow, 'hostname' ) );
		
		// levelshot
		serverblock.getElementById( 'mapshot' ).setAttr( 'src', browserDataSource.getField( browserTableName, selectedRow, 'map' ) );
		serverblock.getElementById( 'serverinfo' ).setInnerRML( infoRml );
		serverblock.css( 'display', 'block' );
	}
	
	void onServerBrowserRowChange( Element @self, Event @ev )
	{
		ElementDataGrid @grid = @self; // implicit cast to ElementDataGrid
		if( @grid == null ) {
			// not a datagrid
			return;
		}

		int numRowsChanged = ev.getParameter( 'num_rows_changed', '0' ).toInt();
		if( numRowsChanged == 0 ) {
			return;
		}

		int firstRowChanged = ev.getParameter( 'first_row_changed', '0' ).toInt();
		
		String prop = servergrid.getProp( 'selected-row' );		
		int selectedRowIndex = prop.empty() ? -1 : prop.toInt();

		for( int i = 0; i < numRowsChanged; i++ ) {
			int rowIndex = firstRowChanged + i;
			Element @row = grid.getRow( rowIndex );

			// we only track whether the server has been (un)bookmarked
			bool isFavorite = browserDataSource.getField( browserTableName, rowIndex, 'favorite' ) == 'yes';

			if( isFavorite ) {
				row.addClass( 'favorite' );
			} else {
				row.removeClass( 'favorite' );
			}

			if( rowIndex == selectedRowIndex ) {
				// update the button
				if( isFavorite )
					favoritebtn.setInnerRML( 'Remove from favorites' );
				else
					favoritebtn.setInnerRML( 'Add to favorites' );
			}
		}
	}
	


	void onServerBrowserRowActivate( Element @elem, Event @ev )
	{
		connectToSelectedServer();
	}

	void onConnectButtonClick( Element @elem, Event @ev )
	{
		connectToSelectedServer();
	}

	void connectToSelectedServer( void )
	{
		if( @servergrid == null ) {
			return;
		}
		if( @browserDataSource == null ) {
			return;
		}

		String prop = servergrid.getProp( 'selected-row' );
		if( prop != '' )
		{
			int selectedRow = prop.toInt();
			if( selectedRow >= 0 )
			{
				String address = browserDataSource.getField( browserTableName, selectedRow, 'address' );
				if( address.empty() ) {
					return;
				}

				// connect to server
				game.execAppend( 'connect ' + address + '\n' );
			}
		}	
	}
	
	bool toggleFavoriteOnSelectedServer( void )
	{
		String address = '';
		bool isFavorite = false;

		if( @servergrid == null ) {
			return false;
		}
		if( @browserDataSource == null ) {
			return false;
		}

		String prop = servergrid.getProp( 'selected-row' );
		if( prop != '' ) {
			int selectedRow = prop.toInt();
			if( selectedRow >= 0 ) {
				address = browserDataSource.getField( browserTableName, selectedRow, 'address' );
				isFavorite = browserDataSource.getField( browserTableName, selectedRow, 'favorite' ) == 'yes';
			}
		}

		if( address.empty() )
			return false;

		bool add = !isFavorite;
		if( add )
			Favorites::add( address );
		else
			Favorites::remove( address );

		if( browserTableName == 'favorites' ) {
			serverblock.css( 'display', 'none' );
			connectbtn.css( 'visibility', 'hidden' );
			favoritebtn.css( 'visibility', 'hidden' );
		}

		return add;
	}

	void onFavoriteButtonClick( Element @elem, Event @ev )
	{
		toggleFavoriteOnSelectedServer();
	}

	</script>
</head>
<body template="porkui" onload="$onJoinLoad" onshow="$onJoinShow">
	<!-- divide the screen to two vertical contexts -->
	<div id="sidebar">
		<div id="sidebar2">
			<a href="#" onclick="animOpenMenu('game_join.rml');">Match browser</a>
			<a href="#" onclick="animOpenMenu('game_local.rml');">Local game</a>
			<a href="#" onclick="animOpenMenu('game_demos.rml');">Demo browser</a>

			<br/>
			<hr class="w95p nicehr" />

			<button id="refresh-btn" onClick="$onRefreshButtonClick">Refresh</button>
			<button id="connect-btn" onClick="$onConnectButtonClick">Connect</button>
			<button id="favorite-btn" onClick="$onFavoriteButtonClick">Add to favorites</button>

			<div id="serverblock" class="infoblock">
				<field id="hostname" formatter="colorcode" value="" /><br/><br/>
				<levelshot id="mapshot" /><br/>
				<div id="serverinfo" />
			</div>
		</div>
	</div>
	
	<div id="leftside">
		<div id="navibar">
			<a href="game_join.rml?servers=normal&noanim=1" id="link-normal">Normal weapons</a>&nbsp;
			<a href="game_join.rml?servers=instagib&noanim=1" id="link-instagib">Instagib</a>&nbsp;
			<a href="game_join.rml?servers=tv&noanim=1" id="link-tv">TV</a>&nbsp;
			<a href="game_join.rml?servers=race&noanim=1" id="link-race">Race</a>
			<a href="game_join.rml?servers=favorites&noanim=1" id="link-favorites">Favorites</a>
		</div>

		<div id="serverbrowser-container" class="dropshadow">
			<!-- "table" for server -->
			<div id="serverbrowser_frame">
				<datagrid id="serverbrowser_datagrid" 
					onrowadd="$onServerBrowserRowAdd" 
					onrowselect="$onServerBrowserRowSelect" 
					onrowchange="$onServerBrowserRowChange"
					onrowactivate="$onServerBrowserRowActivate">
					<col fields="favorite" width="24px" formatter="empty">&nbsp;</col>
					<col fields="ping" width="50px">Ping</col>
					<col fields="cleanname" width="400px">Hostname</col>
					<col fields="players" width="70px">Players</col>
					<col fields="gametype" width="100px">Gametype</col>
					<col fields="mm" width="100px">Ranked</col>
				</datagrid>
			</div>
		</div>
	</div>
	
</body>
</rml>
